# This file is part of the :(){ :|:& };:'s project
# Licensing information can be found in the LICENSE file
# (C) 2014 :(){ :|:& };:. All rights reserved.

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(rpg)

# Dependencies
FIND_PACKAGE(OpenGL REQUIRED)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR})

# Game logic & entity system
FILE(GLOB GAME_SOURCES "game/*.cc")
FILE(GLOB GAME_HEADERS "game/*.h")
SOURCE_GROUP(game FILES ${GAME_SOURCES} ${GAME_HEADERS})

# Common library
FILE(GLOB CORE_SOURCES "core/*.cc")
FILE(GLOB CORE_HEADERS "core/*.h")
SOURCE_GROUP(lib FILES ${CORE_SOURCES} ${CORE_HEADERS})

# Renderer
FILE(GLOB RENDERER_SOURCES "renderer/*.cc")
FILE(GLOB RENDERER_HEADERS "renderer/*.h")
SOURCE_GROUP(renderer FILES ${RENDERER_SOURCES} ${RENDERER_HEADERS})

# Resource manager
FILE(GLOB RSMNGR_SOURCES "rsmngr/*.cc")
FILE(GLOB RSMNGR_HEADERS "rsmngr/*.h")
SOURCE_GROUP(rsmngr FILE ${RSMNGR_SOURCES} ${RSMNGR_HEADERS})

# Platform specifics
IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    FILE(GLOB SYS_PLATFORM_SOURCES "sys/windows/*.cc")
    FILE(GLOB SYS_PLATFORM_HEADERS "sys/windows/*.h")
    ADD_DEFINITIONS(-DR_WINDOWS)
    SET(LIB_PLATFORM opengl32.lib)
    SET(FLAGS WIN32)
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    FILE(GLOB SYS_PLATFORM_SOURCES "sys/linux/*.cc")
    FILE(GLOB SYS_PLATFORM_HEADERS "sys/linux/*.h")
    ADD_DEFINITIONS(-DR_LINUX)
    SET(LIB_PLATFORM GL X11 GLEW lua)
    SET(FLAGS)
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    FILE(GLOB SYS_PLATFORM_SOURCES "sys/mac/*.cc")
    FILE(GLOB SYS_PLATFORM_HEADERS "sys/mac/*.h")
    ADD_DEFINITIONS(-DR_MAC)
    SET(LIB_PLATFORM GL)
    SET(FLAGS)
ENDIF()

FILE(GLOB SYS_SOURCES "sys/*.cc")
FILE(GLOB SYS_HEADERS "sys/*.h")
SOURCE_GROUP(sys FILES ${SYS_SOURCES} ${SYS_HEADERS})
SOURCE_GROUP(platform FILES ${SYS_PLATFORM_SOURCES} ${SYS_PLATFORM_HEADERS})

# Compiler specifics
IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    ADD_DEFINITIONS(-DR_VCC)
    SET(CMAKE_C_FLAGS)
    SET(CMAKE_CXX_FLAGS)
    SET(LIB_COMPILER)
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    ADD_DEFINITIONS(-DR_GCC)
    SET(CMAKE_C_FLAGS)
    SET(CMAKE_CXX_FLAGS)
    SET(LIB_COMPILER)
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    ADD_DEFINITIONS(-DR_CLANG)
    SET(CMAKE_CXX_FLAGS -g)
    SET(LIB_COMPILER)
ENDIF()

# Collect sources
SET(SOURCES ${GAME_SOURCES}
            ${CORE_SOURCES}
            ${RENDERER_SOURCES}
            ${RSMNGR_SOURCES}
            ${SYS_SOURCES}
            ${SYS_PLATFORM_SOURCES})

SET(HEADERS ${GAME_HEADERS}
            ${CORE_HEADERS}
            ${RENDERER_HEADERS}
            ${RSMNGR_HEADERS}
            ${SYS_HEADERS}
            ${SYS_PLATFORM_HEADERS})

# Executable
ADD_EXECUTABLE(game ${FLAGS} ${SOURCES} ${HEADERS})
TARGET_LINK_LIBRARIES(game ${LIB_PLATFORM} ${LIB_COMPILER})
